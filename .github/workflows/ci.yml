name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_ver: 6.8.1
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            version: 2022
            qt_arch_install: msvc2022_64
            build_type: Release
          - qt_ver: 6.8.1
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            version: 2022
            qt_arch_install: msvc2022_64
            build_type: Debug

    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          useLocalCache: true

      - name: Setup MSVC
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: ${{ matrix.msvc_arch }}

      - name: Install Boost
        uses: MarkusJx/install-boost@v2
        id: install-boost
        with:
          boost_version: 1.83.0
          platform_version: 2022
          toolset: msvc
          link: static

      - name: Install Dep
        run: |
          env
          vcpkg install libuv:x64-windows
          vcpkg install libsodium:x64-windows
          vcpkg install openssl:x64-windows
          vcpkg integrate install

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          env
          dir ${CMAKE_TOOLCHAIN_FILE}
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 

        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          CMAKE_TOOLCHAIN_FILE: ${{env.VCPKG_INSTALLATION_ROOT}}/scripts/buildsystems/vcpkg.cmake

      - name: Build
        run: |
          cd build
          cmake --build . --config ${{ matrix.build_type }} --parallel

      - name: Deploy GUI client
        if: matrix.build_type == 'Release'
        shell: pwsh
        run: |
          windeployqt .\build\${{ matrix.build_type }}\gclient.exe --release --no-translations --no-system-d3d-compiler --no-compiler-runtime --dir .\build\${{ matrix.build_type }}\deploy
          Copy-Item .\build\${{ matrix.build_type }}\server.exe .\build\${{ matrix.build_type }}\deploy
          Copy-Item .\build\${{ matrix.build_type }}\client.exe .\build\${{ matrix.build_type }}\deploy
          Compress-Archive -Path .\build\${{ matrix.build_type }}\deploy\* SkyBox-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}.zip

      - uses: actions/upload-artifact@v4
        if: matrix.build_type == 'Release'
        with:
          name: SkyBox-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}.zip
          path: SkyBox-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}.zip

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') && matrix.build_type == 'Release'
        with:
          files: SkyBox-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Release, Debug]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libuv1-dev qt6-base-dev libsodium-dev libssl-dev pkg-config

      - name: Install Boost
        uses: MarkusJx/install-boost@v2
        id: install-boost
        with:
          boost_version: 1.83.0
          platform_version: 20.04
          toolset: gcc
          arch: x86

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake ../ \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBoost_INCLUDE_DIR=${{ steps.install-boost.outputs.BOOST_ROOT }}/include \
            -DBoost_LIBRARY_DIRS=${{ steps.install-boost.outputs.BOOST_ROOT }}/lib \
            -DOPENSSL_ROOT_DIR=/usr
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Build
        run: |
          cd build
          cmake --build . --config ${{ matrix.build_type }} -j16
