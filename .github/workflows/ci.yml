name: CI with MSYS2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-windows-mingw:
    runs-on: windows-latest
    env:
      EXECUTABLE_NAME: skybox
      BOOST_VERSION: '1.85.0'
      BOOST_VERSION_UNDERSCORE: '1_85_0'

    strategy:
      matrix:
        include:
          - build_type: debug
          - build_type: release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-make
            mingw-w64-x86_64-qt6-base
            mingw-w64-x86_64-qt6-tools
            mingw-w64-x86_64-libsodium
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-libuv
            p7zip
            git
            wget

      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/boost
          key: ${{ runner.os }}-mingw-boost-${{ env.BOOST_VERSION }}

      - name: Build Boost from source
        if: steps.cache-boost.outputs.cache-hit != 'true'
        shell: msys2 {0}
        env:
          RUNNER_TEMP_WINDOWS: ${{ runner.temp }}
        run: |
          set -e
          TEMP_DIR_NIX=$(cygpath -u "$RUNNER_TEMP_WINDOWS")
          cd "$TEMP_DIR_NIX"
          
          BOOST_URL="https://archives.boost.io/release/${{ env.BOOST_VERSION }}/source/boost_${{ env.BOOST_VERSION_UNDERSCORE }}.tar.gz"
          echo "Downloading Boost from $BOOST_URL"
          wget -q "$BOOST_URL"
          tar -xf boost_${{ env.BOOST_VERSION_UNDERSCORE }}.tar.gz
          cd boost_${{ env.BOOST_VERSION_UNDERSCORE }}
          
          ./bootstrap.sh --with-toolset=gcc
          
          ./b2 install -j$(nproc) \
            toolset=gcc \
            --prefix="$TEMP_DIR_NIX/boost" \
            --with-system \
            --with-filesystem \
            --with-thread \
            --with-context \
            --with-url \
            --with-program_options

      - name: Set BOOST_ROOT environment variable
        shell: msys2 {0}
        run: |
          BOOST_ROOT_NIX=$(cygpath -u "${{ runner.temp }}/boost")
          echo "BOOST_ROOT=$BOOST_ROOT_NIX" >> $GITHUB_ENV

      - name: Configure CMake
        run: cmake --preset windows-${{ matrix.build_type }}
        shell: msys2 {0}

      - name: Build with CMake
        run: cmake --build --preset windows-${{ matrix.build_type }}
        shell: msys2 {0}

      - name: Install Project
        run: cmake --install build/${{ matrix.build_type }} --prefix install
        shell: msys2 {0}

      - name: Package All Dependencies
        shell: msys2 {0}
        run: |
          set -e
          copy_mingw_runtime_deps() {
            local TARGET_DIR=$1
            local EXE_NAME=$2
            if [[ -f "$TARGET_DIR/$EXE_NAME" ]]; then
              echo "--- Copying MinGW runtime dependencies for $EXE_NAME ---"
              ldd "$TARGET_DIR/$EXE_NAME" | grep -i -E 'mingw64/bin/(libgcc|libstdc|libwinpthread)' | awk '{print $3}' | sort -u | xargs -I % cp -v -n % "$TARGET_DIR"
            else
              echo "Warning: Executable not found at $TARGET_DIR/$EXE_NAME"
            fi
          }
          
          copy_mingw_runtime_deps install/server server.exe
          copy_mingw_runtime_deps install/client client.exe

          echo "--- Packaging gclient.exe dependencies with windeployqt6 ---"
          if [[ -f "install/gclient/gclient.exe" ]]; then
            windeployqt6 install/gclient/gclient.exe
          else
            echo "Warning: Executable not found at install/gclient/gclient.exe"
          fi

          echo "--- Dependency packaging complete ---"
          ls -R install
        
      - name: Create Archive
        shell: msys2 {0}
        run: |
          7z a "${{ env.EXECUTABLE_NAME }}-mingw-x64-${{ matrix.build_type }}.zip" ./install/*

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXECUTABLE_NAME }}-mingw-x64-${{ matrix.build_type }}
          path: ${{ env.EXECUTABLE_NAME }}-mingw-x64-${{ matrix.build_type }}.zip

      - name: Release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release'
        with:
          files: ${{ env.EXECUTABLE_NAME }}-mingw-x64-${{ matrix.build_type }}.zip
