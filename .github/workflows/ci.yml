name: CI

on:
  push:

permissions:
  contents: write

jobs:
  windows:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows-static
      VCPKG_DEFAULT_HOST_TRIPLET: x64-windows-static
      CXXFLAGS: "/D_WIN32_WINNT=0x0A00"
      executable: skybox
    strategy:
      matrix:
        include:
          - qt_ver: 6.8.1
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            version: 2022
            qt_arch_install: msvc2022_64
            build_type: debug
          - qt_ver: 6.8.1
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            version: 2022
            qt_arch_install: msvc2022_64
            build_type: release

    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install CMake
        uses: lukka/get-cmake@latest
        with:
          useLocalCache: true
          cmakeVersion: "~3.25.0"

      # - name: Setup MSVC
      #   uses: TheMrMilchmann/setup-msvc-dev@v3
      #   with:
      #     arch: ${{ matrix.msvc_arch }}
      #
      - name: Install Boost
        uses: MarkusJx/install-boost@v2
        id: install-boost
        with:
          boost_version: 1.86.0
          platform_version: 2022
          toolset: msvc
          link: static

      - name: Run vcpkg integrate install
        run: |
          vcpkg install libsodium
          vcpkg install libuv
          vcpkg install openssl
          vcpkg install pkgconf
          C:/vcpkg/vcpkg integrate install
        shell: cmd

      - name: Run CMake using CMakePresets.json and vcpkg toolchain
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'windows-${{ matrix.build_type }}'
          buildPreset: 'windows-${{ matrix.build_type }}'
          configurePresetAdditionalArgs: >
            [
              "-DBoost_NO_SYSTEM_PATHS=ON",
              "-DBoost_INCLUDE_DIR=${{ steps.install-boost.outputs.BOOST_ROOT }}/include",
              "-DBoost_LIBRARY_DIRS=${{ steps.install-boost.outputs.BOOST_ROOT }}/lib",
              "-DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake",
            ]
        env:
          VCPKG_ROOT: C:/vcpkg
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          PKG_CONFIG_PATH: C:/vcpkg/installed/x64-windows-static/lib/pkgconfig

      - name: Dep
        shell: pwsh
        run: |
          dir
          dir .\build\${{ matrix.build_type }}
          dir .\build\${{ matrix.build_type }}\server
          dir .\build\${{ matrix.build_type }}\client
          dir .\build\${{ matrix.build_type }}\gui
          echo "---------------- ldd .\build\${{ matrix.build_type }}\server\server.exe"
          ldd .\build\${{ matrix.build_type }}\server\server.exe
          echo "---------------- ldd .\build\${{ matrix.build_type }}\client\client.exe"
          ldd .\build\${{ matrix.build_type }}\client\client.exe
          echo "---------------- ldd .\build\${{ matrix.build_type }}\gui\gclient.exe"
          ldd .\build\${{ matrix.build_type }}\gui\gclient.exe
          where.exe windeployqt
          echo "---------------- windeployqt .\build\${{ matrix.build_type }}\gui\gclient.exe"
          windeployqt .\build\${{ matrix.build_type }}\gui\gclient.exe --${{ matrix.build_type }} --no-translations --no-system-d3d-compiler --dir .\build\${{ matrix.build_type }}\gui\
          dir .\build\${{ matrix.build_type }}\gui
          echo "---------------- cmake install"
          cmake --install build/${{ matrix.build_type }}
          echo "---------------- dir"
          dir
          echo "---------------- dir .\install\server"
          dir .\install\server
          echo "---------------- dir .\install\client"
          dir .\install\client

      - name: Dump EXE dependencies
        if: matrix.build_type == 'debug'
        shell: pwsh
        run: |
          echo "ldd .\install\gclient\gclient.exe awk"
          ldd .\install\gclient\gclient.exe | awk '{print $3}'
          echo "ldd .\install\client\client.exe awk"
          ldd .\install\client\client.exe | awk '{print $3}'
          echo "ldd .\install\server\server.exe awk"
          ldd .\install\server\server.exe | awk '{print $3}'
          echo "cp .\install\client\client.exe"
          cp .\install\client\client.exe .\install\client\client111.exe
          echo "---------------- dir .\install\client"
          dir .\install\client

          ldd .\install\server\server.exe | awk '{print $3}' | xargs -I % cp % .\install\server\
          echo "---------------- dir .\install\server"
          dir .\install\server

          ldd .\install\client\client.exe | awk '{print $3}' | xargs -I % cp % .\install\client\
          echo "---------------- dir .\install\client"
          dir .\install\client

          echo "---------------- ldd .\install\gclient\gclient.exe"
          ldd .\install\gclient\gclient.exe

          ldd .\install\gclient\gclient.exe | awk '{print $3}' | xargs -I % cp % .\install\gclient\
          echo "---------------- dir .\install\gclient"
          dir .\install\gclient

      - name: Dump Qt EXE dependencies
        shell: pwsh
        run: |
          echo "---------------- dir .\install\gclient"
          dir .\install\gclient
          echo "---------------- windeployqt .\build\${{ matrix.build_type }}\gui\gclient.exe"
          windeployqt .\build\${{ matrix.build_type }}\gui\gclient.exe --${{ matrix.build_type }} --no-translations --no-system-d3d-compiler --dir .\install\gclient\
          echo "---------------- dir .\install\gclient"
          dir .\install\gclient

      - name: packet
        id: packet
        shell: pwsh
        run: |
          dir .\install
          Compress-Archive -Path .\install\* ${{ env.executable }}-${{ matrix.msvc_arch }}-${{ matrix.build_type }}'.zip'
          dir

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.executable }}-${{ matrix.msvc_arch }}-${{ matrix.build_type }}.zip
          path: ${{ env.executable }}-${{ matrix.msvc_arch }}-${{ matrix.build_type }}.zip

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.executable }}-${{ matrix.msvc_arch }}-${{ matrix.build_type }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}
